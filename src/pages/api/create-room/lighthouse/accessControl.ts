import { ethers } from "ethers";
import Web3Modal from "web3modal";
import lighthouse from '@lighthouse-web3/sdk';

const encryptionSignature = async () =>{
    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);
    const signer = provider.getSigner();
    const address = await signer.getAddress();
    const messageRequested = (await lighthouse.getAuthMessage(address)).data.message;
    const signedMessage = await signer.signMessage(messageRequested);
    return({
      signedMessage: signedMessage,
      publicKey: address
    });
}

export const applyAccessConditions = async(cid: string, contract: string) =>{
    // CID on which you are applying encryption
    // CID is generated by uploading a file with encryption
    // Only the owner of the file can apply access conditions

    // Conditions to add
    const conditions = [
        {
          id: 1,
          chain: "hyperspace",
          method: "balanceOf",
          standardContractType: "ERC721",
          contractAddress: contract,
          returnValueTest: { comparator: ">=", value: "1" },
          parameters: [":userAddress"],
        },
    ];

    // Aggregator is what kind of operation to apply to access conditions
    // Suppose there are two conditions then you can apply ([1] and [2]), ([1] or [2]), !([1] and [2]).
    const aggregator = "([1])";
    const {publicKey, signedMessage} = await encryptionSignature();

    /*
        accessCondition(publicKey, cid, signedMessage, conditions, aggregator)
        Parameters:
            publicKey: owners public key
            CID: CID of file to decrypt
            signedMessage: message signed by owner of publicKey
            conditions: should be in format like above
            aggregator: aggregator to apply on conditions
    */
    const response = await lighthouse.accessCondition(
        publicKey,
        cid,
        signedMessage,
        conditions,
        aggregator
    );

    console.log(response);
    /*
        {
        data: {
            cid: "QmZkEMF5y5Pq3n291fG45oyrmX8bwRh319MYvj7V4W4tNh",
            status: "Success"
        }
        }
    */
}

